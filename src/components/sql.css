INSERT INTO events (title, description, event_date, event_type, event_kind, start_date, end_date, status, departments, notified_users)
VALUES
    ('Мартовский семинар', 'Семинар по маркетинговым стратегиям', '2025-03-20', 'Очное', 'Семинар', '2025-03-20', '2025-03-20', TRUE, ARRAY['Marketing', 'Sales'], ARRAY[1, 5]),
    ('Встреча с партнерами', 'Встреча с ключевыми партнерами', '2025-03-22', 'Очное', 'Встреча', '2025-03-22', '2025-03-22', TRUE, ARRAY['Finance', 'IT'], ARRAY[2, 6]),
    ('Онлайн-тренинг', 'Тренинг по работе с новым ПО', '2025-03-25', 'Онлайн', 'Тренинг', '2025-03-25', '2025-03-25', TRUE, ARRAY['HR', 'IT'], ARRAY[3, 4]),
    ('Командное мероприятие', 'Командообразующее мероприятие', '2025-03-28', 'Очное', 'Мероприятие', '2025-03-28', '2025-03-28', TRUE, ARRAY['Sales', 'Marketing', 'Finance'], ARRAY[1, 2, 3, 4, 5, 6])
ON CONFLICT DO NOTHING;


CREATE TABLE departments (
    id_department SERIAL PRIMARY KEY,
    department_name VARCHAR(100) NOT NULL UNIQUE
);

CREATE TABLE user_departments (
    id_user INT REFERENCES users(id_user) ON DELETE CASCADE,
    id_department INT REFERENCES departments(id_department) ON DELETE CASCADE,
    PRIMARY KEY (id_user, id_department)
);

CREATE TABLE event_departments (
    id_event INT REFERENCES events(id) ON DELETE CASCADE,
    id_department INT REFERENCES departments(id_department) ON DELETE CASCADE,
    PRIMARY KEY (id_event, id_department)
);

INSERT INTO departments (department_name) VALUES
('Отдел разработки'),
('Отдел маркетинга'),
('Отдел продаж'),
('Отдел поддержки');

-- Добавление пользователей
INSERT INTO users (login_users, password_users, role, last_name, first_name, middle_name) VALUES
('ivanov', 'password123', 'admin', 'Иванов', 'Иван', 'Иванович'),
('petrov', 'password456', 'user', 'Петров', 'Петр', 'Петрович'),
('sidorov', 'password789', 'user', 'Сидоров', 'Сидор', 'Сидорович');

-- Связь пользователей с отделами
INSERT INTO user_departments (id_user, id_department) VALUES
(1, 1), -- Иванов в отделе разработки
(2, 2), -- Петров в отделе маркетинга
(3, 3); -- Сидоров в отделе продаж


-- Создание события
INSERT INTO events (title, description, event_date, event_type, event_kind, start_date, end_date, status)
VALUES ('Совещание', 'Обсуждение новых проектов', '2023-10-15', 'offline', 'meeting', '2023-10-15 10:00', '2023-10-15 12:00', TRUE)
RETURNING id;

-- Предположим, что id созданного события = 1
-- Связь события с отделами
INSERT INTO event_departments (id_event, id_department) VALUES
(1, 1), -- Связь с отделом разработки
(1, 2); -- Связь с отделом маркетинга


ALTER TABLE events
ALTER COLUMN departments DROP NOT NULL,
ALTER COLUMN notified_users DROP NOT NULL;

INSERT INTO events (
    title,
    description,
    event_date,
    event_type,
    event_kind,
    start_date,
    end_date,
    status,
    departments,
    notified_users
) VALUES (
    'Совещание',
    'Обсуждение новых проектов',
    '2023-10-15',
    'offline',
    'meeting',
    '2023-10-15 10:00',
    '2023-10-15 12:00',
    TRUE,
    ARRAY['Отдел разработки', 'Отдел маркетинга'], -- Пример отделов
    ARRAY[1, 2] -- Пример ID пользователей для уведомления
);


ALTER TABLE events
ALTER COLUMN departments DROP NOT NULL,
ALTER COLUMN notified_users DROP NOT NULL;


CREATE TABLE IF NOT EXISTS events (
    id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    event_date DATE NOT NULL,
    event_type VARCHAR(50) NOT NULL,
    event_kind VARCHAR(50) NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    status BOOLEAN NOT NULL DEFAULT TRUE,
    departments TEXT[] DEFAULT '{}', -- Пустой массив по умолчанию
    notified_users INTEGER[] DEFAULT '{}' -- Пустой массив по умолчанию
);

ALTER TABLE users ADD COLUMN id_department INT REFERENCES departments(id_department) ON DELETE SET NULL;
ALTER TABLE users ADD COLUMN user_role VARCHAR(50) NOT NULL DEFAULT 'user';
UPDATE users SET user_role = 'user' WHERE user_role IS NULL;
INSERT INTO users (login_users, password_users, user_role, id_department)
VALUES ('user1', 'password1', 'user', 1),
       ('user2', 'password2', 'user', 2);

CREATE TABLE IF NOT EXISTS users (
  id_user SERIAL PRIMARY KEY,
  login_users VARCHAR(100) NOT NULL UNIQUE,
  password_users VARCHAR(100) NOT NULL,
  user_role VARCHAR(50) NOT NULL DEFAULT 'user',
  id_department INT REFERENCES departments(id_department) ON DELETE SET NULL
);